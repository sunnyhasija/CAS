# SCM-Arena Development Documentation

## ðŸš€ Quick Start - Run Your First Experiment

### **Complete Experimental Command - The Ultimate Study**
```bash
# Full 1,080 experiment study with complete data capture
poetry run python -m scm_arena.cli experiment \
  --models llama3.2 \
  --memory none short full \
  --prompts specific neutral \
  --visibility local adjacent full \
  --scenarios classic random shock \
  --game-modes modern classic \
  --runs 10 \
  --rounds 30 \
  --save-results llama32_ultimate_study.csv \
  --save-database \
  --db-path llama32_ultimate.db

# This runs: 3Ã—2Ã—3Ã—3Ã—2Ã—10 = 1,080 total experiments!
# Estimated time: 12-15 hours (perfect overnight run)
```

### **Flag Explanations**
```bash
--models: LLM models to test
  â€¢ llama3.2: Latest Llama model (baseline established)
  â€¢ llama2: Previous generation (future comparison)
  â€¢ mistral: Alternative architecture (future comparison)
  â€¢ Custom models via Ollama

--memory: Historical decision memory strategy
  â€¢ none: Pure reactive (0 decisions stored)
  â€¢ short: Recent context (last 5 decisions)
  â€¢ full: Complete history (all decisions since start)

--prompts: Prompt engineering approach
  â€¢ specific: Position-based business prompts (retailer/wholesaler/etc.)
  â€¢ neutral: Generic supply chain prompts

--visibility: Information sharing across supply chain
  â€¢ local: See only own state (classic Beer Game)
  â€¢ adjacent: See immediate partners (up/downstream + history)
  â€¢ full: Complete supply chain transparency + system metrics

--scenarios: Demand patterns for testing
  â€¢ classic: Step change (4â†’8â†’4) - tests shock response
  â€¢ random: Stochastic demand - tests uncertainty handling
  â€¢ shock: Periodic spikes - tests recovery patterns

--game-modes: Supply chain operational settings
  â€¢ modern: Instant information, 1-turn shipping (industry 4.0)
  â€¢ classic: 1960s delays (2-turn info + shipping delays)

--runs: Statistical replication (10 recommended for robust results)
--rounds: Game length (30 rounds = comprehensive evaluation)
--save-results: Export summary statistics to CSV
--save-database: Complete audit trail in SQLite (every prompt/response)
```

### **Database Schema (Complete Data Capture)**
```sql
-- Every experiment tracked with full metadata
experiments: 1,080 rows (one per experimental run)
-- Round-by-round system state  
rounds: 32,400 rows (30 rounds Ã— 1,080 experiments)
-- Individual LLM agent interactions
agent_rounds: 129,600 rows (4 agents Ã— 30 rounds Ã— 1,080 experiments)
-- Complete game state snapshots
game_states: 32,400 JSON records (complete state each round)
```

### **Quick Test Commands**
```bash
# 1. Test basic functionality (2 minutes)
poetry run python -m scm_arena.cli test-model --model llama3.2

# 2. Single experiment with data capture (2 minutes)
poetry run python -m scm_arena.cli run \
  --model llama3.2 \
  --memory full \
  --visibility adjacent \
  --scenario classic \
  --rounds 10 \
  --save-database

# 3. Focused visibility study (30 minutes)
poetry run python -m scm_arena.cli visibility-study \
  --model llama3.2 \
  --scenario classic \
  --runs 5

# 4. Cross-model comparison (future)
poetry run python -m scm_arena.cli experiment \
  --models llama3.2 llama2 mistral \
  --memory short \
  --visibility local \
  --scenarios classic \
  --runs 3
```

### **Expected Results & Benchmarks**
```bash
# Current LLM Performance Baselines (llama3.2)
Classic Mode Performance:
  Cost: ~$6,200 | Service: ~85% | Bullwhip: ~1.8

Modern Mode Performance:  
  Cost: ~$10,200 | Service: ~70% | Bullwhip: ~2.4

# Key Finding: Classic mode outperforms modern by 64%!
# Hypothesis: LLMs trained on historical business patterns
```

---

## Project Overview

SCM-Arena is the **world's first standardized benchmark** for evaluating Large Language Models on supply chain management coordination tasks, using the multi-agent Beer Game simulation as the evaluation environment.

## Current Status: Production Research Platform with Comprehensive Data Infrastructure
- **Phase**: Complete Research Platform with Full Experimental & Data Capture Framework âœ…
- **Database**: SQLite with complete audit trail of every LLM interaction
- **Baseline Established**: llama3.2 comprehensive study (1,080 experiments)
- **Key Finding**: Classic game mode outperforms modern mode by 64% cost reduction
- **Data Capture**: Every prompt, response, decision, and game state logged
- **Next Phase**: Multi-model comparison studies and hosted model evaluation

## Architecture

### Project Structure
```
CAS/
â”œâ”€â”€ pyproject.toml              # Poetry dependencies & config
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ scm_arena/
â”‚   â”‚   â”œâ”€â”€ __init__.py         # Main package exports
â”‚   â”‚   â”œâ”€â”€ beer_game/          # Core game engine
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ game.py         # Beer game with academic cost structure
â”‚   â”‚   â”‚   â”œâ”€â”€ agents.py       # Agent interfaces & implementations
â”‚   â”‚   â”‚   â””â”€â”€ metrics.py      # Performance evaluation
â”‚   â”‚   â”œâ”€â”€ models/             # LLM integrations
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ ollama_client.py # Ollama integration with data capture
â”‚   â”‚   â”‚   â””â”€â”€ base_model.py   # Abstract model interface
â”‚   â”‚   â”œâ”€â”€ evaluation/         # Benchmark scenarios
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â”œâ”€â”€ runner.py       # Evaluation orchestration
â”‚   â”‚   â”‚   â””â”€â”€ scenarios.py    # Demand pattern definitions
â”‚   â”‚   â”œâ”€â”€ visualization/      # Analysis and plotting
â”‚   â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”‚   â””â”€â”€ plots.py        # Performance visualization
â”‚   â”‚   â”œâ”€â”€ data_capture.py     # Complete experiment tracking
â”‚   â”‚   â””â”€â”€ cli.py              # Command-line interface
â”œâ”€â”€ scm_arena_experiments.db    # SQLite database with all data
â”œâ”€â”€ tests/                      # Test suite
â”œâ”€â”€ examples/                   # Usage examples
â””â”€â”€ README.md                   # User documentation
```

## Key Research Framework

### 1. **Academic Cost Structure (Literature-Compliant)**
**Standard Academic Beer Game Costs:**
- **Holding Cost**: $1.00 per unit per period
- **Backorder Cost**: $2.00 per unit per period  
- **Ratio**: 1:2 (stockouts twice as expensive as inventory)
- **Source**: Sterman (1989), extensive literature review

### 2. **Three-Tier Visibility System with Historical Depth**
**Information Architecture:**
1. **Local Only**: See only own current and historical state
2. **Adjacent**: See immediate partners (upstream/downstream) with history
3. **Full Chain**: Complete supply chain visibility + system metrics

**Historical Integration:**
- Memory window applies to visibility scope
- Adjacent + Full memory = complete partner history
- Creates 3Ã—4 = 12 distinct information architectures

### 3. **Comprehensive Data Capture System**
**Complete Experimental Audit Trail:**
```python
# Every experiment tracked with:
- Experimental metadata (model, conditions, timestamp)
- Every LLM prompt sent to each agent
- Every LLM response received (including failures)
- Game state progression round-by-round
- Individual agent decisions and response times
- Complete reproducibility data
```

### 4. **Multi-Dimensional Experimental Framework**
**Six Crossed Experimental Dimensions:**
1. **Models**: Any Ollama model + future hosted models
2. **Memory**: none (0), short (5), full (all decisions)  
3. **Prompts**: specific (position-based), neutral (generic)
4. **Visibility**: local, adjacent, full
5. **Scenarios**: classic, random, shock, seasonal
6. **Game Modes**: modern (instant), classic (2-turn delays)

## Benchmark Evaluation Methodology

### **Primary Performance Metrics**
1. **Total Supply Chain Cost** (40% weight) - Lower is better
2. **Service Level** (30% weight) - Higher is better  
3. **Bullwhip Ratio** (20% weight) - Lower is better
4. **Consistency** (10% weight) - Lower variance is better

### **SCM-Arena Composite Score**
```python
scm_score = (0.4 * cost_score + 
             0.3 * service_score + 
             0.2 * coordination_score + 
             0.1 * stability_score)
```

### **Multi-Model Leaderboard Categories**
- **Grand Champion**: Best overall performance
- **Cost Master**: Best supply chain cost optimization
- **Service Leader**: Best customer satisfaction
- **Coordination King**: Best bullwhip effect mitigation
- **Consistency Champion**: Most reliable performance

## Research Findings & Insights

### **Breakthrough Finding: Classic Mode Superiority**
**Key Discovery**: Classic game mode (2-turn delays) outperforms modern mode (instant info) by 64%

**Performance Data (llama3.2 baseline):**
- **Classic Mode**: $6,200 average cost, 85% service level
- **Modern Mode**: $10,200 average cost, 70% service level
- **Effect Size**: Cohen's d > 10 (massive effect)

**Research Implications:**
- LLMs may inherit biases from historical training data
- Models trained on traditional business patterns struggle with modern coordination
- Information overload vs. structured delays trade-off

### **Methodology Validation**
- **Statistical Power**: n=10 per condition enables small effect detection
- **Reproducibility**: Complete audit trail for verification
- **Robustness**: Pattern consistent across scenarios and conditions

## Technical Implementation

### **Cost Structure & Game Mechanics**
```python
# Academic-standard parameters
HOLDING_COST_PER_UNIT = 1.0    # $1 per unit per period
BACKORDER_COST_PER_UNIT = 2.0  # $2 per unit per period

# Modern vs Classic modes
Modern: Instant information, 1-turn shipping
Classic: 2-turn information delays, 2-turn shipping
```

### **LLM Integration with Data Capture**
```python
# Every agent decision tracked
interaction_data = {
    'prompt': full_prompt_sent,
    'response': llm_response_received,  
    'decision': parsed_order_quantity,
    'response_time_ms': processing_time,
    'success': parsing_success_flag
}
```

### **Database Schema Design**
```sql
-- Experiment metadata table
CREATE TABLE experiments (
    experiment_id TEXT PRIMARY KEY,
    model_name TEXT,
    memory_strategy TEXT,
    prompt_type TEXT,
    visibility_level TEXT,
    scenario TEXT,
    game_mode TEXT,
    timestamp TEXT,
    total_cost REAL,
    service_level REAL,
    bullwhip_ratio REAL
);

-- Round-by-round game state
CREATE TABLE rounds (
    experiment_id TEXT,
    round_number INTEGER,
    customer_demand INTEGER,
    total_system_cost REAL,
    total_system_inventory INTEGER,
    total_system_backlog INTEGER
);

-- Individual agent interactions
CREATE TABLE agent_rounds (
    experiment_id TEXT,
    round_number INTEGER,
    position TEXT,
    inventory INTEGER,
    backlog INTEGER,
    incoming_order INTEGER,
    outgoing_order INTEGER,
    round_cost REAL,
    prompt_sent TEXT,
    llm_response TEXT,
    decision INTEGER,
    decision_time_ms REAL
);
```

## Usage & Research Applications

### **Academic Research Workflows**
```bash
# 1. Establish model baseline
poetry run python -m scm_arena.cli experiment \
  --models your_model \
  --runs 10 --rounds 30 --save-database

# 2. Cross-model comparison  
poetry run python -m scm_arena.cli experiment \
  --models gpt4 claude3 llama3.2 \
  --runs 5 --save-results comparison.csv

# 3. Information architecture study
poetry run python -m scm_arena.cli experiment \
  --memory none short full \
  --visibility local adjacent full \
  --runs 10

# 4. Export for analysis
sqlite3 experiments.db ".mode csv" ".output results.csv" \
  "SELECT * FROM experiments;"
```

### **Industry Applications**
- **Model Selection**: Evaluate LLMs for supply chain automation
- **Prompt Engineering**: Test different prompting strategies
- **Information Design**: Optimize supply chain visibility architecture
- **Training Data**: Generate synthetic supply chain decisions

### **Academic Contributions**
- **First standardized LLM supply chain benchmark**
- **Reproducible evaluation methodology**
- **Open-source platform for research community**
- **Large-scale empirical findings on LLM coordination**

## Development Roadmap

### **Completed (Phase 1)**
- âœ… Complete Beer Game simulation engine
- âœ… Multi-agent LLM integration (Ollama)
- âœ… Comprehensive data capture system
- âœ… Full experimental framework
- âœ… Academic cost structure implementation
- âœ… llama3.2 baseline establishment

### **In Progress (Phase 2)**
- ðŸ”„ Multi-model evaluation framework
- ðŸ”„ Hosted model integration (GPT-4, Claude)
- ðŸ”„ Advanced visualization dashboard
- ðŸ”„ Statistical analysis pipeline

### **Future (Phase 3)**
- ðŸ“… Web-based evaluation platform (SCM-Arena.com)
- ðŸ“… Live leaderboards and submissions
- ðŸ“… Extended scenarios (multi-product, disruptions)
- ðŸ“… Human vs AI comparison studies
- ðŸ“… Industry partnership evaluations

## Installation & Setup

### **Prerequisites**
```bash
# Required
Python 3.9+
Poetry (dependency management)
Ollama (local LLM hosting)

# Optional
SQLite browser (database exploration)
Jupyter (analysis notebooks)
```

### **Quick Installation**
```bash
# 1. Clone repository
git clone https://github.com/sunnyhasija/CAS
cd CAS

# 2. Install dependencies
poetry install

# 3. Start Ollama server
ollama serve

# 4. Pull models
ollama pull llama3.2
ollama pull llama2
ollama pull mistral

# 5. Test installation
poetry run python -m scm_arena.cli test-model --model llama3.2
```

### **Database Exploration**
```bash
# Explore captured data
sqlite3 scm_arena_experiments.db

# View tables
.tables

# Sample queries
SELECT model_name, AVG(total_cost), AVG(service_level) 
FROM experiments 
GROUP BY model_name;

SELECT position, AVG(decision), COUNT(*) 
FROM agent_rounds 
WHERE prompt_sent LIKE '%SUPPLY CHAIN VISIBILITY%'
GROUP BY position;
```

## Research Impact & Publications

### **Potential Research Papers**
1. **"SCM-Arena: A Benchmark for Large Language Model Supply Chain Coordination"**
2. **"When More Information Hurts: LLM Performance in Modern vs Traditional Supply Chains"**
3. **"Memory and Visibility Effects in Multi-Agent LLM Coordination Tasks"**
4. **"Evaluating Large Language Models for Operations Management Applications"**

### **Key Findings Ready for Publication**
- Classic game mode outperforms modern by 64% (robust across conditions)
- Memory strategies show differential effects by position
- Visibility and memory interaction effects
- LLM coordination patterns vs. human players
- Prompt engineering effectiveness for business applications

### **Data Availability**
- Complete experimental datasets available for research
- Reproducible evaluation protocols
- Open-source benchmark platform
- Full audit trail for verification

---

**SCM-Arena represents the first systematic evaluation platform for LLM supply chain capabilities, providing rigorous benchmarks, comprehensive data capture, and reproducible research methodology for the academic and industry communities.**

**Current Status**: Production-ready with llama3.2 baseline established. Ready for multi-model evaluation and research collaborations.

**Repository**: [https://github.com/sunnyhasija/CAS](https://github.com/sunnyhasija/CAS)

---
**Last Updated**: Current implementation with complete experimental framework and initial baseline results
**Version**: 1.0 - Production Research Platform